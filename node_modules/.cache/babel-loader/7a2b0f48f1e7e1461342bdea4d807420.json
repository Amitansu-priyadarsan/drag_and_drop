{"ast":null,"code":"function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { PreviewListImpl } from './PreviewListImpl';\nvar _current = /*#__PURE__*/new WeakMap();\nvar _previews = /*#__PURE__*/new WeakMap();\nvar _backends = /*#__PURE__*/new WeakMap();\nvar _backendsList = /*#__PURE__*/new WeakMap();\nvar _nodes = /*#__PURE__*/new WeakMap();\nvar _createBackend = /*#__PURE__*/new WeakMap();\nvar _addEventListeners = /*#__PURE__*/new WeakMap();\nvar _removeEventListeners = /*#__PURE__*/new WeakMap();\nvar _backendSwitcher = /*#__PURE__*/new WeakMap();\nvar _callBackend = /*#__PURE__*/new WeakMap();\nvar _connectBackend = /*#__PURE__*/new WeakMap();\nexport class MultiBackendImpl {\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n  constructor(_manager, _context, _options) {\n    _classPrivateFieldInitSpec(this, _current, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _previews, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _backends, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _backendsList, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _nodes, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _createBackend, {\n      writable: true,\n      value: (manager, context, backend) => {\n        var _backend$preview, _backend$skipDispatch;\n        if (!backend.backend) {\n          throw new Error(\"You must specify a 'backend' property in your Backend entry: \".concat(JSON.stringify(backend)));\n        }\n        const instance = backend.backend(manager, context, backend.options);\n        let id = backend.id; // Try to infer an `id` if one doesn't exist\n\n        const inferName = !backend.id && instance && instance.constructor;\n        if (inferName) {\n          id = instance.constructor.name;\n        }\n        if (!id) {\n          throw new Error(\"You must specify an 'id' property in your Backend entry: \".concat(JSON.stringify(backend), \"\\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-5xx\"));\n        } else if (inferName) {\n          console.warn(\n          // eslint-disable-line no-console\n          \"Deprecation notice: You are using a pipeline which doesn't include backends' 'id'.\\n        This might be unsupported in the future, please specify 'id' explicitely for every backend.\");\n        }\n        if (_classPrivateFieldGet(this, _backends)[id]) {\n          throw new Error(\"You must specify a unique 'id' property in your Backend entry:\\n        \".concat(JSON.stringify(backend), \" (conflicts with: \").concat(JSON.stringify(_classPrivateFieldGet(this, _backends)[id]), \")\"));\n        }\n        return {\n          id,\n          instance,\n          preview: (_backend$preview = backend.preview) !== null && _backend$preview !== void 0 ? _backend$preview : false,\n          transition: backend.transition,\n          skipDispatchOnTransition: (_backend$skipDispatch = backend.skipDispatchOnTransition) !== null && _backend$skipDispatch !== void 0 ? _backend$skipDispatch : false\n        };\n      }\n    });\n    _defineProperty(this, \"setup\", () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n      if (MultiBackendImpl.isSetUp) {\n        throw new Error('Cannot have two MultiBackends at the same time.');\n      }\n      MultiBackendImpl.isSetUp = true;\n      _classPrivateFieldGet(this, _addEventListeners).call(this, window);\n      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.setup();\n    });\n    _defineProperty(this, \"teardown\", () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n      MultiBackendImpl.isSetUp = false;\n      _classPrivateFieldGet(this, _removeEventListeners).call(this, window);\n      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.teardown();\n    });\n    _defineProperty(this, \"connectDragSource\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragSource', sourceId, node, options);\n    });\n    _defineProperty(this, \"connectDragPreview\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragPreview', sourceId, node, options);\n    });\n    _defineProperty(this, \"connectDropTarget\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDropTarget', sourceId, node, options);\n    });\n    _defineProperty(this, \"profile\", () => {\n      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.profile();\n    });\n    _defineProperty(this, \"previewEnabled\", () => {\n      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].preview;\n    });\n    _defineProperty(this, \"previewsList\", () => {\n      return _classPrivateFieldGet(this, _previews);\n    });\n    _defineProperty(this, \"backendsList\", () => {\n      return _classPrivateFieldGet(this, _backendsList);\n    });\n    _classPrivateFieldInitSpec(this, _addEventListeners, {\n      writable: true,\n      value: target => {\n        _classPrivateFieldGet(this, _backendsList).forEach(backend => {\n          if (backend.transition) {\n            target.addEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));\n          }\n        });\n      }\n    });\n    _classPrivateFieldInitSpec(this, _removeEventListeners, {\n      writable: true,\n      value: target => {\n        _classPrivateFieldGet(this, _backendsList).forEach(backend => {\n          if (backend.transition) {\n            target.removeEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));\n          }\n        });\n      }\n    });\n    _classPrivateFieldInitSpec(this, _backendSwitcher, {\n      writable: true,\n      value: event => {\n        const oldBackend = _classPrivateFieldGet(this, _current);\n        _classPrivateFieldGet(this, _backendsList).some(backend => {\n          if (backend.id !== _classPrivateFieldGet(this, _current) && backend.transition && backend.transition.check(event)) {\n            _classPrivateFieldSet(this, _current, backend.id);\n            return true;\n          }\n          return false;\n        });\n        if (_classPrivateFieldGet(this, _current) !== oldBackend) {\n          var _event$target;\n          _classPrivateFieldGet(this, _backends)[oldBackend].instance.teardown();\n          Object.keys(_classPrivateFieldGet(this, _nodes)).forEach(id => {\n            const node = _classPrivateFieldGet(this, _nodes)[id];\n            node.unsubscribe();\n            node.unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, node.func, ...node.args);\n          });\n          _classPrivateFieldGet(this, _previews).backendChanged(this);\n          const newBackend = _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)];\n          newBackend.instance.setup();\n          if (newBackend.skipDispatchOnTransition) {\n            return;\n          }\n          const Class = event.constructor;\n          const newEvent = new Class(event.type, event);\n          (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dispatchEvent(newEvent);\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _callBackend, {\n      writable: true,\n      value: (func, sourceId, node, options) => {\n        return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance[func](sourceId, node, options);\n      }\n    });\n    _classPrivateFieldInitSpec(this, _connectBackend, {\n      writable: true,\n      value: (func, sourceId, node, options) => {\n        const nodeId = \"\".concat(func, \"_\").concat(sourceId);\n        const unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, func, sourceId, node, options);\n        _classPrivateFieldGet(this, _nodes)[nodeId] = {\n          func,\n          args: [sourceId, node, options],\n          unsubscribe\n        };\n        return () => {\n          _classPrivateFieldGet(this, _nodes)[nodeId].unsubscribe();\n          delete _classPrivateFieldGet(this, _nodes)[nodeId];\n        };\n      }\n    });\n    if (!_options || !_options.backends || _options.backends.length < 1) {\n      throw new Error(\"You must specify at least one Backend, if you are coming from 2.x.x (or don't understand this error)\\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-2xx\");\n    }\n    _classPrivateFieldSet(this, _previews, new PreviewListImpl());\n    _classPrivateFieldSet(this, _backends, {});\n    _classPrivateFieldSet(this, _backendsList, []);\n    _options.backends.forEach(backend => {\n      const backendRecord = _classPrivateFieldGet(this, _createBackend).call(this, _manager, _context, backend);\n      _classPrivateFieldGet(this, _backends)[backendRecord.id] = backendRecord;\n      _classPrivateFieldGet(this, _backendsList).push(backendRecord);\n    });\n    _classPrivateFieldSet(this, _current, _classPrivateFieldGet(this, _backendsList)[0].id);\n    _classPrivateFieldSet(this, _nodes, {});\n  }\n}\n_defineProperty(MultiBackendImpl, \"isSetUp\", false);","map":{"version":3,"names":["_classPrivateFieldInitSpec","obj","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_defineProperty","key","Object","defineProperty","enumerable","configurable","writable","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","PreviewListImpl","_current","WeakMap","_previews","_backends","_backendsList","_nodes","_createBackend","_addEventListeners","_removeEventListeners","_backendSwitcher","_callBackend","_connectBackend","MultiBackendImpl","constructor","_manager","_context","_options","manager","context","backend","_backend$preview","_backend$skipDispatch","Error","concat","JSON","stringify","instance","options","id","inferName","name","console","warn","preview","transition","skipDispatchOnTransition","window","isSetUp","setup","teardown","sourceId","node","profile","target","forEach","addEventListener","event","removeEventListener","oldBackend","some","check","_event$target","keys","unsubscribe","func","args","backendChanged","newBackend","Class","newEvent","type","dispatchEvent","nodeId","backends","length","backendRecord","push"],"sources":["/Users/NI017/Downloads/project1/node_modules/dnd-multi-backend/dist/esm/MultiBackendImpl.js"],"sourcesContent":["function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nimport { PreviewListImpl } from './PreviewListImpl';\n\nvar _current = /*#__PURE__*/new WeakMap();\n\nvar _previews = /*#__PURE__*/new WeakMap();\n\nvar _backends = /*#__PURE__*/new WeakMap();\n\nvar _backendsList = /*#__PURE__*/new WeakMap();\n\nvar _nodes = /*#__PURE__*/new WeakMap();\n\nvar _createBackend = /*#__PURE__*/new WeakMap();\n\nvar _addEventListeners = /*#__PURE__*/new WeakMap();\n\nvar _removeEventListeners = /*#__PURE__*/new WeakMap();\n\nvar _backendSwitcher = /*#__PURE__*/new WeakMap();\n\nvar _callBackend = /*#__PURE__*/new WeakMap();\n\nvar _connectBackend = /*#__PURE__*/new WeakMap();\n\nexport class MultiBackendImpl {\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n\n  /*private*/\n  constructor(_manager, _context, _options) {\n    _classPrivateFieldInitSpec(this, _current, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _previews, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _backends, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _backendsList, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _nodes, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _createBackend, {\n      writable: true,\n      value: (manager, context, backend) => {\n        var _backend$preview, _backend$skipDispatch;\n\n        if (!backend.backend) {\n          throw new Error(\"You must specify a 'backend' property in your Backend entry: \".concat(JSON.stringify(backend)));\n        }\n\n        const instance = backend.backend(manager, context, backend.options);\n        let id = backend.id; // Try to infer an `id` if one doesn't exist\n\n        const inferName = !backend.id && instance && instance.constructor;\n\n        if (inferName) {\n          id = instance.constructor.name;\n        }\n\n        if (!id) {\n          throw new Error(\"You must specify an 'id' property in your Backend entry: \".concat(JSON.stringify(backend), \"\\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-5xx\"));\n        } else if (inferName) {\n          console.warn( // eslint-disable-line no-console\n          \"Deprecation notice: You are using a pipeline which doesn't include backends' 'id'.\\n        This might be unsupported in the future, please specify 'id' explicitely for every backend.\");\n        }\n\n        if (_classPrivateFieldGet(this, _backends)[id]) {\n          throw new Error(\"You must specify a unique 'id' property in your Backend entry:\\n        \".concat(JSON.stringify(backend), \" (conflicts with: \").concat(JSON.stringify(_classPrivateFieldGet(this, _backends)[id]), \")\"));\n        }\n\n        return {\n          id,\n          instance,\n          preview: (_backend$preview = backend.preview) !== null && _backend$preview !== void 0 ? _backend$preview : false,\n          transition: backend.transition,\n          skipDispatchOnTransition: (_backend$skipDispatch = backend.skipDispatchOnTransition) !== null && _backend$skipDispatch !== void 0 ? _backend$skipDispatch : false\n        };\n      }\n    });\n\n    _defineProperty(this, \"setup\", () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      if (MultiBackendImpl.isSetUp) {\n        throw new Error('Cannot have two MultiBackends at the same time.');\n      }\n\n      MultiBackendImpl.isSetUp = true;\n\n      _classPrivateFieldGet(this, _addEventListeners).call(this, window);\n\n      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.setup();\n    });\n\n    _defineProperty(this, \"teardown\", () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      MultiBackendImpl.isSetUp = false;\n\n      _classPrivateFieldGet(this, _removeEventListeners).call(this, window);\n\n      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.teardown();\n    });\n\n    _defineProperty(this, \"connectDragSource\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragSource', sourceId, node, options);\n    });\n\n    _defineProperty(this, \"connectDragPreview\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragPreview', sourceId, node, options);\n    });\n\n    _defineProperty(this, \"connectDropTarget\", (sourceId, node, options) => {\n      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDropTarget', sourceId, node, options);\n    });\n\n    _defineProperty(this, \"profile\", () => {\n      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.profile();\n    });\n\n    _defineProperty(this, \"previewEnabled\", () => {\n      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].preview;\n    });\n\n    _defineProperty(this, \"previewsList\", () => {\n      return _classPrivateFieldGet(this, _previews);\n    });\n\n    _defineProperty(this, \"backendsList\", () => {\n      return _classPrivateFieldGet(this, _backendsList);\n    });\n\n    _classPrivateFieldInitSpec(this, _addEventListeners, {\n      writable: true,\n      value: target => {\n        _classPrivateFieldGet(this, _backendsList).forEach(backend => {\n          if (backend.transition) {\n            target.addEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));\n          }\n        });\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _removeEventListeners, {\n      writable: true,\n      value: target => {\n        _classPrivateFieldGet(this, _backendsList).forEach(backend => {\n          if (backend.transition) {\n            target.removeEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));\n          }\n        });\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _backendSwitcher, {\n      writable: true,\n      value: event => {\n        const oldBackend = _classPrivateFieldGet(this, _current);\n\n        _classPrivateFieldGet(this, _backendsList).some(backend => {\n          if (backend.id !== _classPrivateFieldGet(this, _current) && backend.transition && backend.transition.check(event)) {\n            _classPrivateFieldSet(this, _current, backend.id);\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (_classPrivateFieldGet(this, _current) !== oldBackend) {\n          var _event$target;\n\n          _classPrivateFieldGet(this, _backends)[oldBackend].instance.teardown();\n\n          Object.keys(_classPrivateFieldGet(this, _nodes)).forEach(id => {\n            const node = _classPrivateFieldGet(this, _nodes)[id];\n\n            node.unsubscribe();\n            node.unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, node.func, ...node.args);\n          });\n\n          _classPrivateFieldGet(this, _previews).backendChanged(this);\n\n          const newBackend = _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)];\n\n          newBackend.instance.setup();\n\n          if (newBackend.skipDispatchOnTransition) {\n            return;\n          }\n\n          const Class = event.constructor;\n          const newEvent = new Class(event.type, event);\n          (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dispatchEvent(newEvent);\n        }\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _callBackend, {\n      writable: true,\n      value: (func, sourceId, node, options) => {\n        return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance[func](sourceId, node, options);\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _connectBackend, {\n      writable: true,\n      value: (func, sourceId, node, options) => {\n        const nodeId = \"\".concat(func, \"_\").concat(sourceId);\n\n        const unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, func, sourceId, node, options);\n\n        _classPrivateFieldGet(this, _nodes)[nodeId] = {\n          func,\n          args: [sourceId, node, options],\n          unsubscribe\n        };\n        return () => {\n          _classPrivateFieldGet(this, _nodes)[nodeId].unsubscribe();\n\n          delete _classPrivateFieldGet(this, _nodes)[nodeId];\n        };\n      }\n    });\n\n    if (!_options || !_options.backends || _options.backends.length < 1) {\n      throw new Error(\"You must specify at least one Backend, if you are coming from 2.x.x (or don't understand this error)\\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-2xx\");\n    }\n\n    _classPrivateFieldSet(this, _previews, new PreviewListImpl());\n\n    _classPrivateFieldSet(this, _backends, {});\n\n    _classPrivateFieldSet(this, _backendsList, []);\n\n    _options.backends.forEach(backend => {\n      const backendRecord = _classPrivateFieldGet(this, _createBackend).call(this, _manager, _context, backend);\n\n      _classPrivateFieldGet(this, _backends)[backendRecord.id] = backendRecord;\n\n      _classPrivateFieldGet(this, _backendsList).push(backendRecord);\n    });\n\n    _classPrivateFieldSet(this, _current, _classPrivateFieldGet(this, _backendsList)[0].id);\n\n    _classPrivateFieldSet(this, _nodes, {});\n  }\n\n}\n\n_defineProperty(MultiBackendImpl, \"isSetUp\", false);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
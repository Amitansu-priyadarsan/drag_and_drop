{"ast":null,"code":"var _jsxFileName = \"/Users/NI017/Downloads/project1/src/ConnectorOverlay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RADIUS = 12; // ←★ elbow corner radius\n\n/**\n * Absolute‑positioned SVG that draws an orthogonal elbow connector\n * between every node and its parent.  It is completely presentation‑only:\n * no state mutations, no DOM queries inside <Tree>.\n */\nexport default function ConnectorOverlay(_ref) {\n  _s();\n  let {\n    treeData,\n    nodeRefs,\n    containerRef,\n    gap,\n    addingId,\n    // ←★ new\n    isDragging // ←★ new\n  } = _ref;\n  const GAP = gap !== null && gap !== void 0 ? gap : 12; // ←★ use prop or fallback to 12\n  const [paths, setPaths] = useState([]);\n  const raf = useRef(null);\n  const update = () => {\n    cancelAnimationFrame(raf.current);\n    raf.current = requestAnimationFrame(() => {\n      if (!containerRef.current) return;\n      const cRect = containerRef.current.getBoundingClientRect();\n      const next = [];\n      treeData.forEach(n => {\n        if (n.parent === 0) return; // root has no parent line\n        const childEl = nodeRefs.current[n.id];\n        const parentEl = nodeRefs.current[n.parent];\n        if (!childEl || !parentEl) return; // collapsed branch\n\n        const cr = childEl.getBoundingClientRect();\n        const pr = parentEl.getBoundingClientRect();\n\n        // Column sits GAP px left of the card border, vertically centred\n        const colX = cr.left - cRect.left - GAP;\n        const cY = cr.top - cRect.top + cr.height / 2;\n        const pY = pr.top - cRect.top + pr.height / 2;\n\n        /*  Rounded orthogonal path:\n         *  parent ⬇︎ to radius‑before‑child ⤵︎ quarter‑circle ⟶ to child\n         */\n        const d = pY < cY ? // child is below parent\n        \"M \".concat(colX, \" \").concat(pY, \"\\n               V \").concat(cY - RADIUS, \"\\n               Q \").concat(colX, \" \").concat(cY, \" \").concat(colX + RADIUS, \" \").concat(cY, \"\\n               H \").concat(colX + GAP) : // child is above parent (rare but covers drag edge‑case)\n        \"M \".concat(colX, \" \").concat(pY, \"\\n               V \").concat(cY + RADIUS, \"\\n               Q \").concat(colX, \" \").concat(cY, \" \").concat(colX + RADIUS, \" \").concat(cY, \"\\n               H \").concat(colX + GAP);\n        next.push({\n          d: d.replace(/\\s+/g, \" \")\n        });\n      });\n\n      /* --------------------------------------------------------------\n       * 2) placeholders that are shown while the user is adding a node\n       * -------------------------------------------------------------- */\n      const phEls = containerRef.current.querySelectorAll(\"[data-placeholder-parent]\");\n      phEls.forEach(ph => {\n        const parentId = Number(ph.getAttribute(\"data-placeholder-parent\"));\n        const parentEl = nodeRefs.current[parentId];\n        if (!parentEl) return; // parent collapsed or missing\n\n        const pr = parentEl.getBoundingClientRect();\n        const cr = ph.getBoundingClientRect();\n        const colX = cr.left - cRect.left - GAP;\n        const pY = pr.top - cRect.top + pr.height / 2;\n        const cY = cr.top - cRect.top + cr.height / 2;\n        const d = \"M \".concat(colX, \" \").concat(pY, \"\\n                   V \").concat(cY - RADIUS, \"\\n                   Q \").concat(colX, \" \").concat(cY, \" \").concat(colX + RADIUS, \" \").concat(cY, \"\\n                   H \").concat(colX + GAP);\n        next.push({\n          d: d.replace(/\\s+/g, \" \")\n        });\n      });\n      setPaths(next);\n    });\n  };\n\n  // redraw when nodes change *or* placeholder mounts/unmounts\n  useLayoutEffect(update, [treeData, addingId]);\n  useLayoutEffect(() => {\n    if (!containerRef.current) return;\n    const ro = new ResizeObserver(update);\n    ro.observe(containerRef.current);\n    Object.values(nodeRefs.current).forEach(el => el && ro.observe(el));\n    window.addEventListener(\"scroll\", update, true);\n    window.addEventListener(\"resize\", update);\n    return () => {\n      ro.disconnect();\n      window.removeEventListener(\"scroll\", update, true);\n      window.removeEventListener(\"resize\", update);\n    };\n  }, [treeData, nodeRefs, containerRef]);\n\n  /* --------------------------------------------------------------\n   * While a node is being dragged we need to update every frame\n   * because the DOM transforms but treeData does not change.\n   * -------------------------------------------------------------- */\n  const dragLoop = useRef(null);\n  useLayoutEffect(() => {\n    if (!isDragging) {\n      cancelAnimationFrame(dragLoop.current);\n      return;\n    }\n    const tick = () => {\n      update(); // recompute paths\n      dragLoop.current = requestAnimationFrame(tick);\n    };\n    tick(); // start loop\n    return () => cancelAnimationFrame(dragLoop.current);\n  }, [isDragging]); // runs only on start / end\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      position: \"absolute\",\n      inset: 0,\n      pointerEvents: \"none\",\n      overflow: \"visible\"\n    },\n    children: paths.map((_ref2, i) => {\n      let {\n        d\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        d: d,\n        fill: \"none\",\n        stroke: \"#DFDFE2\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        shapeRendering: \"geometricPrecision\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(ConnectorOverlay, \"IT5aZRDvSeJhYO5c/5CeyrVUfSs=\");\n_c = ConnectorOverlay;\nvar _c;\n$RefreshReg$(_c, \"ConnectorOverlay\");","map":{"version":3,"names":["React","useLayoutEffect","useRef","useState","jsxDEV","_jsxDEV","RADIUS","ConnectorOverlay","_ref","_s","treeData","nodeRefs","containerRef","gap","addingId","isDragging","GAP","paths","setPaths","raf","update","cancelAnimationFrame","current","requestAnimationFrame","cRect","getBoundingClientRect","next","forEach","n","parent","childEl","id","parentEl","cr","pr","colX","left","cY","top","height","pY","d","concat","push","replace","phEls","querySelectorAll","ph","parentId","Number","getAttribute","ro","ResizeObserver","observe","Object","values","el","window","addEventListener","disconnect","removeEventListener","dragLoop","tick","style","position","inset","pointerEvents","overflow","children","map","_ref2","i","fill","stroke","strokeWidth","strokeLinecap","shapeRendering","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/NI017/Downloads/project1/src/ConnectorOverlay.jsx"],"sourcesContent":["import React, { useLayoutEffect, useRef, useState } from \"react\";\n\nconst RADIUS = 12;  // ←★ elbow corner radius\n\n/**\n * Absolute‑positioned SVG that draws an orthogonal elbow connector\n * between every node and its parent.  It is completely presentation‑only:\n * no state mutations, no DOM queries inside <Tree>.\n */\nexport default function ConnectorOverlay({\n  treeData,\n  nodeRefs,\n  containerRef,\n  gap,\n  addingId,        // ←★ new\n  isDragging,               // ←★ new\n}) {\n  const GAP = gap ?? 12;  // ←★ use prop or fallback to 12\n  const [paths, setPaths] = useState([]);\n  const raf = useRef(null);\n\n  const update = () => {\n    cancelAnimationFrame(raf.current);\n    raf.current = requestAnimationFrame(() => {\n      if (!containerRef.current) return;\n      const cRect = containerRef.current.getBoundingClientRect();\n      const next = [];\n\n      treeData.forEach((n) => {\n        if (n.parent === 0) return;                     // root has no parent line\n        const childEl  = nodeRefs.current[n.id];\n        const parentEl = nodeRefs.current[n.parent];\n        if (!childEl || !parentEl) return;              // collapsed branch\n\n        const cr = childEl.getBoundingClientRect();\n        const pr = parentEl.getBoundingClientRect();\n\n        // Column sits GAP px left of the card border, vertically centred\n        const colX  = cr.left - cRect.left - GAP;\n        const cY    = cr.top  - cRect.top  + cr.height / 2;\n        const pY    = pr.top  - cRect.top  + pr.height / 2;\n\n        /*  Rounded orthogonal path:\n         *  parent ⬇︎ to radius‑before‑child ⤵︎ quarter‑circle ⟶ to child\n         */\n        const d =\n          pY < cY\n            ? // child is below parent\n              `M ${colX} ${pY}\n               V ${cY - RADIUS}\n               Q ${colX} ${cY} ${colX + RADIUS} ${cY}\n               H ${colX + GAP}`\n            : // child is above parent (rare but covers drag edge‑case)\n              `M ${colX} ${pY}\n               V ${cY + RADIUS}\n               Q ${colX} ${cY} ${colX + RADIUS} ${cY}\n               H ${colX + GAP}`;\n\n        next.push({ d: d.replace(/\\s+/g, \" \") });\n      });\n\n      /* --------------------------------------------------------------\n       * 2) placeholders that are shown while the user is adding a node\n       * -------------------------------------------------------------- */\n      const phEls = containerRef.current.querySelectorAll(\n        \"[data-placeholder-parent]\"\n      );\n\n      phEls.forEach((ph) => {\n        const parentId = Number(ph.getAttribute(\"data-placeholder-parent\"));\n        const parentEl = nodeRefs.current[parentId];\n        if (!parentEl) return;                     // parent collapsed or missing\n\n        const pr = parentEl.getBoundingClientRect();\n        const cr = ph.getBoundingClientRect();\n\n        const colX = cr.left - cRect.left - GAP;\n        const pY   = pr.top  - cRect.top  + pr.height / 2;\n        const cY   = cr.top  - cRect.top  + cr.height / 2;\n\n        const d = `M ${colX} ${pY}\n                   V ${cY - RADIUS}\n                   Q ${colX} ${cY} ${colX + RADIUS} ${cY}\n                   H ${colX + GAP}`;\n\n        next.push({ d: d.replace(/\\s+/g, \" \") });\n      });\n\n      setPaths(next);\n    });\n  };\n\n  // redraw when nodes change *or* placeholder mounts/unmounts\n  useLayoutEffect(update, [treeData, addingId]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) return;\n    const ro = new ResizeObserver(update);\n    ro.observe(containerRef.current);\n    Object.values(nodeRefs.current).forEach((el) => el && ro.observe(el));\n    window.addEventListener(\"scroll\", update, true);\n    window.addEventListener(\"resize\", update);\n    return () => {\n      ro.disconnect();\n      window.removeEventListener(\"scroll\", update, true);\n      window.removeEventListener(\"resize\", update);\n    };\n  }, [treeData, nodeRefs, containerRef]);\n\n  /* --------------------------------------------------------------\n   * While a node is being dragged we need to update every frame\n   * because the DOM transforms but treeData does not change.\n   * -------------------------------------------------------------- */\n  const dragLoop = useRef(null);\n  useLayoutEffect(() => {\n    if (!isDragging) {\n      cancelAnimationFrame(dragLoop.current);\n      return;\n    }\n    const tick = () => {\n      update();                       // recompute paths\n      dragLoop.current = requestAnimationFrame(tick);\n    };\n    tick();                           // start loop\n    return () => cancelAnimationFrame(dragLoop.current);\n  }, [isDragging]);                   // runs only on start / end\n\n  return (\n    <svg\n      style={{\n        position: \"absolute\",\n        inset: 0,\n        pointerEvents: \"none\",\n        overflow: \"visible\",\n      }}\n    >\n      {paths.map(({ d }, i) => (\n        <path\n          key={i}\n          d={d}\n          fill=\"none\"\n          stroke=\"#DFDFE2\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          shapeRendering=\"geometricPrecision\"\n        />\n      ))}\n    </svg>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
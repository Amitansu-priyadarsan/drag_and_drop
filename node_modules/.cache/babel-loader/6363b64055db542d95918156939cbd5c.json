{"ast":null,"code":"export var ListenerType;\n(function (ListenerType) {\n  ListenerType[\"mouse\"] = \"mouse\";\n  ListenerType[\"touch\"] = \"touch\";\n  ListenerType[\"keyboard\"] = \"keyboard\";\n})(ListenerType || (ListenerType = {}));","map":{"version":3,"sources":["../src/interfaces.ts"],"names":["ListenerType","mouse","touch","keyboard"],"mappings":"AAAA,OAAA,IA+BO,YAIN;WAJWA,YAAY,EAAA;EAAZA,YAAY,CACvBC,OAAK,CAAA,GAALA,OAAK;EADMD,YAAY,CAEvBE,OAAK,CAAA,GAALA,OAAK;EAFMF,YAAY,CAGvBG,UAAQ,CAAA,GAARA,UAAQ;GAHGH,YAAY,KAAZA,YAAY,GAAA,CAAA,CAAA,CAAA,CAAA","sourcesContent":["export interface EventName {\n\tstart?: 'mousedown' | 'touchstart'\n\tmove?: 'mousemove' | 'touchmove'\n\tend?: 'mouseup' | 'touchend'\n\tcontextmenu?: 'contextmenu'\n\tkeydown?: 'keydown'\n}\n\nexport interface TouchBackendOptions {\n\tdelay: number\n\tdelayTouchStart: number\n\tenableTouchEvents: boolean\n\tenableKeyboardEvents: boolean\n\tenableMouseEvents: boolean\n\tignoreContextMenu: boolean\n\tenableHoverOutsideTarget: boolean\n\tdelayMouseStart: number\n\ttouchSlop: number\n\tscrollAngleRanges?: AngleRange[] | undefined\n\trootElement: Node | undefined\n\n\tgetDropTargetElementsAtPoint?:\n\t\t| undefined\n\t\t| ((x: number, y: number, dropTargets: HTMLElement[]) => HTMLElement[])\n}\n\nexport interface AngleRange {\n\tstart: number\n\tend: number\n}\n\nexport enum ListenerType {\n\tmouse = 'mouse',\n\ttouch = 'touch',\n\tkeyboard = 'keyboard',\n}\n\nexport interface TouchBackendContext {\n\twindow?: Window\n\tdocument?: Document\n}\n"]},"metadata":{},"sourceType":"module"}